// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OSKI_SOLUTIONS.DataAccess;

namespace OSKI_SOLUTIONS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Authorization.ActiveRefreshToken<OSKI_SOLUTIONS.DataAccess.Entities.User>", b =>
                {
                    b.Property<string>("Jti")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UUID")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Jti");

                    b.HasIndex("UserId");

                    b.ToTable("ActiveRefreshTokens");
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.OptionOfQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Correct")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("OptionsOfQuestions");
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.QuestionOfTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<int>("maxOptionsCount")
                        .HasColumnType("integer");

                    b.Property<int>("maxSelectedOptionsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("QuestionsOfTests");
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Session.OptionOfQuestionInSession", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("BaseOptionId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionOfSessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BaseOptionId");

                    b.HasIndex("QuestionOfSessionId");

                    b.ToTable("OptionsOfQuestionsInSessions");
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Session.QuestionOfSession", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("BaseQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("SessionOfTestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseQuestionId");

                    b.HasIndex("SessionOfTestId");

                    b.ToTable("QuestionsOfSessions");
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Session.SessionOfTest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionsOfTests");
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxCountOfQuestions")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TestLengthInMinuts")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            Login = "admin",
                            PasswordHash = "A9031GWBTFBHFPHA81373877F69EFFF27D00B175EE4CCA606F6966D68BC9550210CDEA8496130F6295DE7507A934B31D02AB2A5A85"
                        });
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Authorization.ActiveRefreshToken<OSKI_SOLUTIONS.DataAccess.Entities.User>", b =>
                {
                    b.HasOne("OSKI_SOLUTIONS.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.OptionOfQuestion", b =>
                {
                    b.HasOne("OSKI_SOLUTIONS.DataAccess.Entities.Tests.QuestionOfTest", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.QuestionOfTest", b =>
                {
                    b.HasOne("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Session.OptionOfQuestionInSession", b =>
                {
                    b.HasOne("OSKI_SOLUTIONS.DataAccess.Entities.Tests.OptionOfQuestion", "BaseOption")
                        .WithMany()
                        .HasForeignKey("BaseOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Session.QuestionOfSession", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionOfSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Session.QuestionOfSession", b =>
                {
                    b.HasOne("OSKI_SOLUTIONS.DataAccess.Entities.Tests.QuestionOfTest", "BaseQuestion")
                        .WithMany()
                        .HasForeignKey("BaseQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Session.SessionOfTest", "Session")
                        .WithMany("Questions")
                        .HasForeignKey("SessionOfTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Session.SessionOfTest", b =>
                {
                    b.HasOne("OSKI_SOLUTIONS.DataAccess.Entities.Tests.Test", "Test")
                        .WithMany("Sessions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OSKI_SOLUTIONS.DataAccess.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
